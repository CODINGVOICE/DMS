package team.epm.module;

import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.Session;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import team.epm.dms.view.DmsMenuTreeViewImpl;
import team.epm.dms.view.DmsUserViewImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 09 17:49:44 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DmsModuleImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public DmsModuleImpl() {
    }

    /**
     * Container's getter for DmsAuditMsgView.
     * @return DmsAuditMsgView
     */
    public ViewObjectImpl getDmsAuditMsgView() {
        return (ViewObjectImpl)findViewObject("DmsAuditMsgView");
    }

    /**
     * Container's getter for DmsFunctionView.
     * @return DmsFunctionView
     */
    public ViewObjectImpl getDmsFunctionView() {
        return (ViewObjectImpl)findViewObject("DmsFunctionView");
    }

    /**
     * Container's getter for DmsGroupRoleView.
     * @return DmsGroupRoleView
     */
    public ViewObjectImpl getDmsGroupRoleView() {
        return (ViewObjectImpl)findViewObject("DmsGroupRoleView");
    }

    /**
     * Container's getter for DmsGroupView.
     * @return DmsGroupView
     */
    public ViewObjectImpl getDmsGroupView() {
        return (ViewObjectImpl)findViewObject("DmsGroupView");
    }

    /**
     * Container's getter for DmsMenuView.
     * @return DmsMenuView
     */
    public ViewObjectImpl getDmsMenuView() {
        return (ViewObjectImpl)findViewObject("DmsMenuView");
    }

    /**
     * Container's getter for DmsPropertyView.
     * @return DmsPropertyView
     */
    public ViewObjectImpl getDmsPropertyView() {
        return (ViewObjectImpl)findViewObject("DmsPropertyView");
    }

    /**
     * Container's getter for DmsRoleFunctionView.
     * @return DmsRoleFunctionView
     */
    public ViewObjectImpl getDmsRoleFunctionView() {
        return (ViewObjectImpl)findViewObject("DmsRoleFunctionView");
    }

    /**
     * Container's getter for DmsRoleMenuView.
     * @return DmsRoleMenuView
     */
    public ViewObjectImpl getDmsRoleMenuView() {
        return (ViewObjectImpl)findViewObject("DmsRoleMenuView");
    }

    /**
     * Container's getter for DmsRoleValueView.
     * @return DmsRoleValueView
     */
    public ViewObjectImpl getDmsRoleValueView() {
        return (ViewObjectImpl)findViewObject("DmsRoleValueView");
    }

    /**
     * Container's getter for DmsRoleView.
     * @return DmsRoleView
     */
    public ViewObjectImpl getDmsRoleView() {
        return (ViewObjectImpl)findViewObject("DmsRoleView");
    }

    /**
     * Container's getter for DmsUserGroupView.
     * @return DmsUserGroupView
     */
    public ViewObjectImpl getDmsUserGroupView() {
        return (ViewObjectImpl)findViewObject("DmsUserGroupView");
    }

    /**
     * Container's getter for DmsUserKeyView.
     * @return DmsUserKeyView
     */
    public ViewObjectImpl getDmsUserKeyView() {
        return (ViewObjectImpl)findViewObject("DmsUserKeyView");
    }

    /**
     * Container's getter for DmsUserView.
     * @return DmsUserView
     */
    public DmsUserViewImpl getDmsUserView() {
        return (DmsUserViewImpl)findViewObject("DmsUserView");
    }

    /**
     * Container's getter for DmsValueSetView.
     * @return DmsValueSetView
     */
    public ViewObjectImpl getDmsValueSetView() {
        return (ViewObjectImpl)findViewObject("DmsValueSetView");
    }

    /**
     * Container's getter for DmsMenuTreeView.
     * @return DmsMenuTreeView
     */
    public DmsMenuTreeViewImpl getDmsMenuTreeView() {
        return (DmsMenuTreeViewImpl)findViewObject("DmsMenuTreeView");
    }

    /**
     * Container's getter for DmsLookupView.
     * @return DmsLookupView
     */
    public ViewObjectImpl getDmsLookupView() {
        return (ViewObjectImpl)findViewObject("DmsLookupView");
    }

    @Override
    protected void prepareSession(Session session) {
        super.prepareSession(session);
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        Object userId = sessionScope.get("userId");
        if (userId != null) {
            this.getSession().getUserData().put("userId", userId);
        }
    }

    /**
     * Container's getter for DmsUserUngroupedView1.
     * @return DmsUserUngroupedView1
     */
    public ViewObjectImpl getDmsUserUngroupedView1() {
        return (ViewObjectImpl)findViewObject("DmsUserUngroupedView1");
    }

    /**
     * Container's getter for DmsUserUngroupedView.
     * @return DmsUserUngroupedView
     */
    public ViewObjectImpl getDmsUserUngroupedView() {
        return (ViewObjectImpl)findViewObject("DmsUserUngroupedView");
    }

    /**
     * Container's getter for DmsUserGroupedView.
     * @return DmsUserGroupedView
     */
    public ViewObjectImpl getDmsUserGroupedView() {
        return (ViewObjectImpl)findViewObject("DmsUserGroupedView");
    }

    /**
     * Container's getter for DmsGroupsForRoleView1.
     * @return DmsGroupsForRoleView1
     */
    public ViewObjectImpl getDmsGroupsForRoleView() {
        return (ViewObjectImpl)findViewObject("DmsGroupsForRoleView");
    }

    public List<Row> getValuesFromValueSet(String source, String locale) {
        List<Row> valueList = new ArrayList<Row>();
        String sql =
            "select CODE,MEANING from " + source + " where locale='" + locale +
            "' order by seq";
        ViewObject vo = this.findViewObject("ValuesFromValueSet");
        if (vo != null) {
            vo.remove();
        }
        ViewObject valuesVO =
            this.createViewObjectFromQueryStmt("ValuesFromValueSet", sql);
        try{
        valuesVO.executeQuery();
        }
        catch(Exception e){
            return valueList;
        }
        
        RowSet rows = valuesVO.getRowSet();
        while (rows.hasNext()) {
            valueList.add(rows.next());
        }
        return valueList;

    }

    public List getValuesByRoleAndValueSetName(String roleId,
                                               String valueSetId) {
        List values = new ArrayList();
        ViewObjectImpl view = getDmsRoleValueView();
        view.setWhereClause("Role_Id=:Role_Id and value_set_id=:ValueSet_Id");
        view.defineNamedWhereClauseParam("Role_Id", null, null);
        view.defineNamedWhereClauseParam("ValueSet_Id", null, null);
        view.setNamedWhereClauseParam("Role_Id", roleId);
        view.setNamedWhereClauseParam("ValueSet_Id", valueSetId);
        view.executeQuery();
        RowSet rows = view.getRowSet();
        while (rows.hasNext()) {
            values.add(rows.next().getAttribute("ValueId"));
        }
        return values;
    }

    public void updateRoleValue(String roleId, List<String> valueIds,
                                String valueSetId) {

        ViewObjectImpl view = getDmsRoleValueView();
        view.setWhereClause("Role_Id=:Role_Id and value_set_id=:ValueSet_Id");
        view.defineNamedWhereClauseParam("Role_Id", null, null);
        view.defineNamedWhereClauseParam("ValueSet_Id", null, null);
        view.setNamedWhereClauseParam("Role_Id", roleId);
        view.setNamedWhereClauseParam("ValueSet_Id", valueSetId);
        view.executeQuery();
        while (view.hasNext()) {
            Row row = view.next();
            String value = (String)row.getAttribute("ValueId");
            if (valueIds.contains(value)) {
                valueIds.remove(value);
                continue;
            } else
                view.removeCurrentRow();
        }
        for (String e : valueIds) {
            Row row = view.createRow();
            row.setAttribute("RoleId", roleId);
            row.setAttribute("ValueSetId", valueSetId);
            row.setAttribute("ValueId", e);
            view.insertRow(row);
        }
        getDBTransaction().commit();
    }

    public List<String> getFunctionIdsByRoleId(String roleId, String locale) {
        List<String> functionList = new ArrayList<String>();
        String sql =
            "select t.id  from Dms_Function t, Dms_Role_Function t1 "+
            "where "+
          "t.id = t1.function_id " + " and t1.role_id =? "+    
            " and t.locale =?";
        PreparedStatement st=this.getDBTransaction().createPreparedStatement(sql, 0);
        ResultSet rs = null;
        try {
            st.setString(1, roleId);
            st.setString(2,locale);
            rs=st.executeQuery();
            while (rs.next()) {
            functionList.add(rs.getString("ID"));
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return functionList;
    }
    public void updateRoleFunction(String roleId, List<String> functionIds
                                ) {
        ViewObjectImpl view =getDmsRoleFunctionView();
        view.setWhereClause("Role_Id=:Role_Id");
        view.defineNamedWhereClauseParam("Role_Id", null, null);
        view.setNamedWhereClauseParam("Role_Id", roleId);
        view.executeQuery();
        while (view.hasNext()) {
            Row row = view.next();
            String value = (String)row.getAttribute("FunctionId");
            if (functionIds.contains(value)) {
                functionIds.remove(value);
                continue;
            } else
                view.removeCurrentRow();
        }
        for (String e : functionIds) {
            Row row = view.createRow();
            row.setAttribute("RoleId", roleId);
            row.setAttribute("FunctionId", e);
            view.insertRow(row);
        }
        getDBTransaction().commit();
    }
    
    public List<String> getRoleIdsByGroupId(String groupId){
        List<String> roleIds = new ArrayList<String>();
        ViewObjectImpl view = getDmsGroupRoleView();
        view.setWhereClause("Group_Id=:Group_Id");
        view.defineNamedWhereClauseParam("Group_Id", null, null);
        view.setNamedWhereClauseParam("Group_Id", groupId);
        view.executeQuery();
        RowSet rows = view.getRowSet();
        while (rows.hasNext()) {
            roleIds.add((String)rows.next().getAttribute("RoleId"));
        }
        return roleIds;
        
    }
    public void updateGroupRole(String groupId,List<String> roleIds){
            ViewObjectImpl view =getDmsGroupRoleView();
            view.setWhereClause("Group_Id=:Group_Id");
            view.defineNamedWhereClauseParam("Group_Id", null, null);
            view.setNamedWhereClauseParam("Group_Id", groupId);
            view.executeQuery();
            while (view.hasNext()) {
                Row row = view.next();
                String value = (String)row.getAttribute("RoleId");
                if (roleIds.contains(value)) {
                    roleIds.remove(value);
                    continue;
                } else
                    view.removeCurrentRow();
            }
            for (String e : roleIds) {
                Row row = view.createRow();
                row.setAttribute("GroupId", groupId);
                row.setAttribute("RoleId", e);
                view.insertRow(row);
            }
            getDBTransaction().commit();
        }
    }


