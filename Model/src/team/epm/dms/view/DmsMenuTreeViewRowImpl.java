package team.epm.dms.view;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Sep 28 18:56:37 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DmsMenuTreeViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(DmsMenuTreeViewRowImpl obj) {
                return obj.getId();
            }

            public void put(DmsMenuTreeViewRowImpl obj, Object value) {
                obj.setId((String)value);
            }
        }
        ,
        Label {
            public Object get(DmsMenuTreeViewRowImpl obj) {
                return obj.getLabel();
            }

            public void put(DmsMenuTreeViewRowImpl obj, Object value) {
                obj.setLabel((String)value);
            }
        }
        ,
        PId {
            public Object get(DmsMenuTreeViewRowImpl obj) {
                return obj.getPId();
            }

            public void put(DmsMenuTreeViewRowImpl obj, Object value) {
                obj.setPId((String)value);
            }
        }
        ,
        FunctionId {
            public Object get(DmsMenuTreeViewRowImpl obj) {
                return obj.getFunctionId();
            }

            public void put(DmsMenuTreeViewRowImpl obj, Object value) {
                obj.setFunctionId((String)value);
            }
        }
        ,
        Action {
            public Object get(DmsMenuTreeViewRowImpl obj) {
                return obj.getAction();
            }

            public void put(DmsMenuTreeViewRowImpl obj, Object value) {
                obj.setAction((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DmsMenuTreeViewRowImpl object);

        public abstract void put(DmsMenuTreeViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int LABEL = AttributesEnum.Label.index();
    public static final int PID = AttributesEnum.PId.index();
    public static final int FUNCTIONID = AttributesEnum.FunctionId.index();
    public static final int ACTION = AttributesEnum.Action.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DmsMenuTreeViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Id.
     * @return the Id
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Id.
     * @param value value to set the  Id
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Label.
     * @return the Label
     */
    public String getLabel() {
        return (String) getAttributeInternal(LABEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Label.
     * @param value value to set the  Label
     */
    public void setLabel(String value) {
        setAttributeInternal(LABEL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PId.
     * @return the PId
     */
    public String getPId() {
        return (String) getAttributeInternal(PID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PId.
     * @param value value to set the  PId
     */
    public void setPId(String value) {
        setAttributeInternal(PID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FunctionId.
     * @return the FunctionId
     */
    public String getFunctionId() {
        return (String) getAttributeInternal(FUNCTIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FunctionId.
     * @param value value to set the  FunctionId
     */
    public void setFunctionId(String value) {
        setAttributeInternal(FUNCTIONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Action.
     * @return the Action
     */
    public String getAction() {
        return (String) getAttributeInternal(ACTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Action.
     * @param value value to set the  Action
     */
    public void setAction(String value) {
        setAttributeInternal(ACTION, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
