package team.epm.dms.model;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 14 10:38:01 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DmsUserImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(DmsUserImpl obj) {
                return obj.getId();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setId((String)value);
            }
        }
        ,
        Acc {
            public Object get(DmsUserImpl obj) {
                return obj.getAcc();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setAcc((String)value);
            }
        }
        ,
        Pwd {
            public Object get(DmsUserImpl obj) {
                return obj.getPwd();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setPwd((String)value);
            }
        }
        ,
        LockFlag {
            public Object get(DmsUserImpl obj) {
                return obj.getLockFlag();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setLockFlag((String)value);
            }
        }
        ,
        EnableFlag {
            public Object get(DmsUserImpl obj) {
                return obj.getEnableFlag();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setEnableFlag((String)value);
            }
        }
        ,
        RetryCount {
            public Object get(DmsUserImpl obj) {
                return obj.getRetryCount();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setRetryCount((Number)value);
            }
        }
        ,
        LockTime {
            public Object get(DmsUserImpl obj) {
                return obj.getLockTime();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setLockTime((Date)value);
            }
        }
        ,
        UpdatedAt {
            public Object get(DmsUserImpl obj) {
                return obj.getUpdatedAt();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setUpdatedAt((Date)value);
            }
        }
        ,
        CreatedAt {
            public Object get(DmsUserImpl obj) {
                return obj.getCreatedAt();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setCreatedAt((Date)value);
            }
        }
        ,
        CreatedBy {
            public Object get(DmsUserImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        UpdatedBy {
            public Object get(DmsUserImpl obj) {
                return obj.getUpdatedBy();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setUpdatedBy((String)value);
            }
        }
        ,
        Name {
            public Object get(DmsUserImpl obj) {
                return obj.getName();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setName((String)value);
            }
        }
        ,
        Sex {
            public Object get(DmsUserImpl obj) {
                return obj.getSex();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setSex((String)value);
            }
        }
        ,
        Mail {
            public Object get(DmsUserImpl obj) {
                return obj.getMail();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setMail((String)value);
            }
        }
        ,
        Locale {
            public Object get(DmsUserImpl obj) {
                return obj.getLocale();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setLocale((String)value);
            }
        }
        ,
        Phone {
            public Object get(DmsUserImpl obj) {
                return obj.getPhone();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setPhone((String)value);
            }
        }
        ,
        OtherInfo {
            public Object get(DmsUserImpl obj) {
                return obj.getOtherInfo();
            }

            public void put(DmsUserImpl obj, Object value) {
                obj.setOtherInfo((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DmsUserImpl object);

        public abstract void put(DmsUserImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int ACC = AttributesEnum.Acc.index();
    public static final int PWD = AttributesEnum.Pwd.index();
    public static final int LOCKFLAG = AttributesEnum.LockFlag.index();
    public static final int ENABLEFLAG = AttributesEnum.EnableFlag.index();
    public static final int RETRYCOUNT = AttributesEnum.RetryCount.index();
    public static final int LOCKTIME = AttributesEnum.LockTime.index();
    public static final int UPDATEDAT = AttributesEnum.UpdatedAt.index();
    public static final int CREATEDAT = AttributesEnum.CreatedAt.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int SEX = AttributesEnum.Sex.index();
    public static final int MAIL = AttributesEnum.Mail.index();
    public static final int LOCALE = AttributesEnum.Locale.index();
    public static final int PHONE = AttributesEnum.Phone.index();
    public static final int OTHERINFO = AttributesEnum.OtherInfo.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DmsUserImpl() {
    }
    @Override
    protected void prepareForDML(int operation, TransactionEvent transactionEvent) {
        super.prepareForDML(operation, transactionEvent);
        if (operation==DML_UPDATE){
            this.setUpdatedAt(new Date(new java.sql.Timestamp(System.currentTimeMillis())));
            this.setUpdatedBy(this.getDBTransaction().getSession().getUserData().get("userId")+"");
        }
    }
    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public String getId() {
        return (String)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Acc, using the alias name Acc.
     * @return the Acc
     */
    public String getAcc() {
        return (String)getAttributeInternal(ACC);
    }

    /**
     * Sets <code>value</code> as the attribute value for Acc.
     * @param value value to set the Acc
     */
    public void setAcc(String value) {
        setAttributeInternal(ACC, value);
    }

    /**
     * Gets the attribute value for Pwd, using the alias name Pwd.
     * @return the Pwd
     */
    public String getPwd() {
        return (String)getAttributeInternal(PWD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Pwd.
     * @param value value to set the Pwd
     */
    public void setPwd(String value) {
        setAttributeInternal(PWD, value);
    }

    /**
     * Gets the attribute value for LockFlag, using the alias name LockFlag.
     * @return the LockFlag
     */
    public String getLockFlag() {
        return (String)getAttributeInternal(LOCKFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for LockFlag.
     * @param value value to set the LockFlag
     */
    public void setLockFlag(String value) {
        setAttributeInternal(LOCKFLAG, value);
    }

    /**
     * Gets the attribute value for EnableFlag, using the alias name EnableFlag.
     * @return the EnableFlag
     */
    public String getEnableFlag() {
        return (String)getAttributeInternal(ENABLEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnableFlag.
     * @param value value to set the EnableFlag
     */
    public void setEnableFlag(String value) {
        setAttributeInternal(ENABLEFLAG, value);
    }

    /**
     * Gets the attribute value for RetryCount, using the alias name RetryCount.
     * @return the RetryCount
     */
    public Number getRetryCount() {
        return (Number)getAttributeInternal(RETRYCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RetryCount.
     * @param value value to set the RetryCount
     */
    public void setRetryCount(Number value) {
        setAttributeInternal(RETRYCOUNT, value);
    }

    /**
     * Gets the attribute value for LockTime, using the alias name LockTime.
     * @return the LockTime
     */
    public Date getLockTime() {
        return (Date)getAttributeInternal(LOCKTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LockTime.
     * @param value value to set the LockTime
     */
    public void setLockTime(Date value) {
        setAttributeInternal(LOCKTIME, value);
    }

    /**
     * Gets the attribute value for UpdatedAt, using the alias name UpdatedAt.
     * @return the UpdatedAt
     */
    public Date getUpdatedAt() {
        return (Date)getAttributeInternal(UPDATEDAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedAt.
     * @param value value to set the UpdatedAt
     */
    public void setUpdatedAt(Date value) {
        setAttributeInternal(UPDATEDAT, value);
    }

    /**
     * Gets the attribute value for CreatedAt, using the alias name CreatedAt.
     * @return the CreatedAt
     */
    public Date getCreatedAt() {
        return (Date)getAttributeInternal(CREATEDAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedAt.
     * @param value value to set the CreatedAt
     */
    public void setCreatedAt(Date value) {
        setAttributeInternal(CREATEDAT, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the UpdatedBy
     */
    public String getUpdatedBy() {
        return (String)getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the Name
     */
    public String getName() {
        return (String)getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for Sex, using the alias name Sex.
     * @return the Sex
     */
    public String getSex() {
        return (String)getAttributeInternal(SEX);
    }

    /**
     * Sets <code>value</code> as the attribute value for Sex.
     * @param value value to set the Sex
     */
    public void setSex(String value) {
        setAttributeInternal(SEX, value);
    }

    /**
     * Gets the attribute value for Mail, using the alias name Mail.
     * @return the Mail
     */
    public String getMail() {
        return (String)getAttributeInternal(MAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mail.
     * @param value value to set the Mail
     */
    public void setMail(String value) {
        setAttributeInternal(MAIL, value);
    }

    /**
     * Gets the attribute value for Locale, using the alias name Locale.
     * @return the Locale
     */
    public String getLocale() {
        return (String)getAttributeInternal(LOCALE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Locale.
     * @param value value to set the Locale
     */
    public void setLocale(String value) {
        setAttributeInternal(LOCALE, value);
    }

    /**
     * Gets the attribute value for Phone, using the alias name Phone.
     * @return the Phone
     */
    public String getPhone() {
        return (String)getAttributeInternal(PHONE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Phone.
     * @param value value to set the Phone
     */
    public void setPhone(String value) {
        setAttributeInternal(PHONE, value);
    }

    /**
     * Gets the attribute value for OtherInfo, using the alias name OtherInfo.
     * @return the OtherInfo
     */
    public String getOtherInfo() {
        return (String)getAttributeInternal(OTHERINFO);
    }

    /**
     * Sets <code>value</code> as the attribute value for OtherInfo.
     * @param value value to set the OtherInfo
     */
    public void setOtherInfo(String value) {
        setAttributeInternal(OTHERINFO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String id) {
        return new Key(new Object[]{id});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("team.epm.dms.model.DmsUser");
        }
        return mDefinitionObject;
    }
}
