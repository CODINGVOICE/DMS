package team.epm.dcm.view;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import java.util.List;

import oracle.adf.share.ADFContext;

import oracle.jbo.RowIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import team.epm.dcm.model.DcmCombinationImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 17 15:31:33 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DcmCombinationViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public DcmCombinationViewImpl() {
    }
    /**
     * @param combiantonCode 组合编码
     * @param vsTables       构成组合的值集的表或视图
     * @param valueSetCodes  值集的编码
     * @throws SQLException
     */
    public void refreshCombinationRecord(String combiantonCode,List<String> vsTables,List<String> valueSetCodes) throws SQLException {
        StringBuffer sql=new StringBuffer();
        StringBuffer sql_select=new StringBuffer();
        StringBuffer sql_from=new StringBuffer();
        StringBuffer sql_where=new StringBuffer();
        StringBuffer sql_sub=new StringBuffer();
        sql.append("INSERT INTO \"").append(combiantonCode).append("\"(ID");
        sql_select.append(" SELECT DCM_SEQ.NEXTVAL ");
        sql_from.append(" FROM ");
        sql_sub.append("SELECT 1 FROM \"").append(combiantonCode).append("\" T WHERE 1=1");
        for(int i=0;i<valueSetCodes.size();i++){
            sql.append(",\"").append(valueSetCodes.get(i)).append("\"");
            sql_select.append(",T").append(i).append(".CODE");
            sql_from.append("\"").append(vsTables.get(i)).append("\"").append(" T").append(i).append(",");
            sql_where.append(" AND T").append(i).append(".LOCALE='").append(ADFContext.getCurrent().getLocale()).append("'");
            sql_sub.append(" AND T.\"").append(valueSetCodes.get(i)).append("\"");
            sql_sub.append("=").append("T").append(i).append(".CODE");
        }
        int n=sql_from.lastIndexOf(",");
        sql_from.deleteCharAt(n);
        sql.append(")");
        sql.append(sql_select);
        sql.append(sql_from);
        sql.append(" WHERE NOT EXISTS(");
        sql.append(sql_sub).append(")");
        sql.append(sql_where);
        this.getDBTransaction().createStatement(0).execute(sql.toString());
        this.getDBTransaction().commit();
    }

    /**
     * Returns the bind variable value for locale.
     * @return bind variable value for locale
     */
    public String getlocale() {
        return (String)getNamedWhereClauseParam("locale");
    }

    /**
     * Sets <code>value</code> for bind variable locale.
     * @param value value to bind as locale
     */
    public void setlocale(String value) {
        setNamedWhereClauseParam("locale", value);
    }
}
